package org.example.bot;

import org.example.parseObjects.GroupCode;
import org.example.parseObjects.SubjectEnum;
import org.example.parseObjects.Specialty;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.*;
import java.util.stream.Collectors;

public class UniversityBot extends TelegramLongPollingBot {

    private final Map<Long, List<String>> userSubjects = new HashMap<>(); // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    private final Map<Long, List<String>> userAllSubjects = new HashMap<>();

    private final Map<Long, Map<String, Integer>> userScores = new HashMap<>(); // –ë–∞–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    private final Map<Long, String> userQuotas = new HashMap<>(); // –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–≤–æ—Ç–∞
    private final Map<Long, Integer> userMessageId = new HashMap<>(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π
    private final List<Specialty> specialties; // –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
    private final List<GroupCode> groupCodes; // –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    private final Map<Long, List<String>> userPreferredGroups = new HashMap<>(); // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã

    private final Map<Long, Boolean> userNotificationPreferences = new HashMap<>();
    private final Map<Long, String> userNotificationTexts = new HashMap<>();
    private final Set<Long> adminIds = Set.of(983195539L); // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    private boolean isAdminMode = false;

    public UniversityBot(List<Specialty> specialties, List<GroupCode> groupCodes) {
        this.specialties = specialties;
        this.groupCodes = groupCodes;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery());
        } else if (update.hasMessage() && update.getMessage().hasText()) {
            handleText(update);
        }
    }

    private void handleScoreInput(Long userId, String text, Integer messageId) {
        try {
            int score = Integer.parseInt(text.trim()); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
            if (score < 0 || score > 100) {
                sendMessage(userId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.");
                return;
            }

            List<String> subjects = userSubjects.get(userId);
            if (subjects == null || subjects.isEmpty()) {
                sendMessage(userId, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã.");
                return;
            }

            String currentSubject = subjects.remove(0); // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
            userScores.computeIfAbsent(userId, k -> new HashMap<>()).put(currentSubject, score);

            if (subjects.isEmpty()) {
                // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, —Å–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø
                sendMessage(userId, "–ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã.");
                int groupMessageId = sendGroupSelectionMessage(userId); // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø
                userMessageId.put(userId, groupMessageId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            } else {
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                sendMessage(userId, "–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: " + SubjectEnum.valueOf(subjects.get(0)).getDescription());
            }
        } catch (NumberFormatException e) {
            sendMessage(userId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
        }
    }




    private void updateMessage(Long chatId, String text, Integer messageId) {
        EditMessageText editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId.toString());
        editMessageText.setMessageId(messageId);
        editMessageText.setText(text);

        try {
            execute(editMessageText);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void handleText(Update update) {
        Long userId = update.getMessage().getChatId();
        System.out.println(userId);
        String text = update.getMessage().getText();
        Integer messageId = update.getMessage().getMessageId();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (adminIds.contains(userId) && text.equalsIgnoreCase("/admin")) {
            isAdminMode = true;
            sendMessage(userId, "–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:");
            return;
        }

        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if (adminIds.contains(userId) && isAdminMode) {
            sendAdminBroadcast(userId, text);
            isAdminMode = false;
            return;
        }
        if (text.equalsIgnoreCase("/notifications")) {
            handleNotificationSetup(userId, text);
        } else if (userNotificationPreferences.containsKey(userId) &&
                userNotificationPreferences.get(userId) &&
                userNotificationTexts.containsKey(userId) &&
                userNotificationTexts.get(userId) == null) {
            handleNotificationSetup(userId, text);
        } else {
        if (text.equals("/start")) {
            sendQuotaSelectionMessage(userId);
        } else if (userSubjects.containsKey(userId)) {
            handleScoreInput(userId, text, messageId); // –ü–µ—Ä–µ–¥–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        } else {
            sendMessage(userId, "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.");
        }
        }
    }

    private void sendAdminBroadcast(Long adminId, String text) {
        int successCount = 0;
        int failCount = 0;

        // –†–∞—Å—Å—ã–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        for (Map.Entry<Long, Boolean> entry : userNotificationPreferences.entrySet()) {
            if (entry.getValue()) { // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
                try {
                    sendMessage(entry.getKey(), "üîî –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n" + text);
                    successCount++;
                } catch (Exception e) {
                    failCount++;
                }
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        String report = String.format(
                "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n" +
                        "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n" +
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: %d",
                successCount, failCount
        );

        sendMessage(adminId, report);
    }

    private void handleCallback(CallbackQuery callbackQuery) {
        Long userId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();
        String data = callbackQuery.getData();
        if (data.equals("NOTIFY_SETUP")) {
            handleNotificationSetup(userId, "/notifications");
        }
        if (data.equals("ADMIN_PANEL")) {
            if (adminIds.contains(userId)) {
                isAdminMode = true;
                sendMessage(userId, "–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:");
            }
        }
        if (data.equals("NOTIFY_ON")) {
            userNotificationPreferences.put(userId, true);
            userNotificationTexts.put(userId, null); // –ü–æ–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
            sendMessage(userId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ:");
        } else if (data.equals("NOTIFY_OFF")) {
            userNotificationPreferences.put(userId, false);
            sendMessage(userId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.");
        }
        if (data.startsWith("QUOTA_")) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–≤–æ—Ç—ã
            String quota = data.substring(6);
            userQuotas.put(userId, quota);

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –∫–≤–æ—Ç—ã
            sendMessage(userId, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–≤–æ—Ç—É: " + quota);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            sendSubjectSelectionForm(userId);
        }
        else if (data.startsWith("SUBJECT_")) {
            String subject = data.substring(8); // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "SUBJECT_"
            List<String> selectedSubjects = userSubjects.computeIfAbsent(userId, k -> new ArrayList<>());
            List<String> allSubjects = userAllSubjects.computeIfAbsent(userId, k -> new ArrayList<>());
            if (selectedSubjects.contains(subject)) {
                selectedSubjects.remove(subject);
                allSubjects.remove(subject);
            } else {
                selectedSubjects.add(subject);
                allSubjects.add(subject);
            }
            sendSubjectSelectionMessage(userId, messageId);
        } else if (data.equals("DONE_SUBJECTS")) {
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            if (userSubjects.containsKey(userId) && !userSubjects.get(userId).isEmpty()) {
                askForScore(userId); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –±–∞–ª–ª–æ–≤
            } else {
                sendMessage(userId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç.");
            }
        } else if (data.startsWith("GROUP_")) {
            String groupCode = data.substring(6);
            List<String> selectedGroups = userPreferredGroups.computeIfAbsent(userId, k -> new ArrayList<>());

            if (selectedGroups.contains(groupCode)) {
                selectedGroups.remove(groupCode); // –£–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É
            } else {
                selectedGroups.add(groupCode); // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            updateGroupSelectionMessage(userId);
        } else if (data.equals("DONE_GROUPS")) {
            sendMessage(userId, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø!");
            sendAvailableSpecialties(userId); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
        }

        else if (data.equals("RESET")) {
            // –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            resetUserData(userId);
            sendQuotaSelectionMessage(userId);
        }
    }

    private void sendMessageInParts(Long chatId, String fullMessage) {
        int maxLength = 4096; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        int start = 0;
        while (start < fullMessage.length()) {
            int end = Math.min(fullMessage.length(), start + maxLength);
            String part = fullMessage.substring(start, end);
            sendMessage(chatId, part);
            start = end;
        }
    }


    private void sendSafeMessage(Long chatId, String message) {
        if (message.length() > 4096) {
            sendMessageInParts(chatId, message);
        } else {
            sendMessage(chatId, message);
        }
    }


    private InlineKeyboardMarkup generateGroupSelectionKeyboard(Long userId) {
        List<String> selectedGroups = userPreferredGroups.getOrDefault(userId, new ArrayList<>());
        // –í–º–µ—Å—Ç–æ userSubjects –±–µ—Ä–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        List<String> userSelectedSubjects = userAllSubjects.getOrDefault(userId, new ArrayList<>());

        Set<String> normalizedUserSubjects = userSelectedSubjects.stream()
                .map(String::toUpperCase)
                .collect(Collectors.toSet());

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        for (GroupCode group : groupCodes) {
            List<String> groupSubjects = group.getSubjects();
            if (groupSubjects == null || groupSubjects.isEmpty()) continue;

            List<String> normalizedGroupSubjects = groupSubjects.stream()
                    .map(String::toUpperCase)
                    .collect(Collectors.toList());

            long matchCount = normalizedGroupSubjects.stream()
                    .filter(normalizedUserSubjects::contains)
                    .count();

            if (matchCount < 3) continue;

            String buttonText = selectedGroups.contains(group.getCode())
                    ? "‚úÖ " + group.getName()
                    : "‚òëÔ∏è " + group.getName();

            buttons.add(Collections.singletonList(
                    InlineKeyboardButton.builder()
                            .text(buttonText)
                            .callbackData("GROUP_" + group.getCode())
                            .build()
            ));
        }

        buttons.add(Collections.singletonList(
                InlineKeyboardButton.builder()
                        .text("‚úÖ –ì–æ—Ç–æ–≤–æ")
                        .callbackData("DONE_GROUPS")
                        .build()
        ));

        keyboard.setKeyboard(buttons);
        return keyboard;
    }





    private void sendSubjectSelectionForm(Long userId) {
        SendMessage newMessage = new SendMessage();
        newMessage.setChatId(userId);
        newMessage.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:");

        InlineKeyboardMarkup keyboard = generateSubjectSelectionKeyboard(userId);
        newMessage.setReplyMarkup(keyboard);

        try {
            Message message = execute(newMessage);
            userMessageId.put(userId, message.getMessageId()); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(userId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.");
        }
    }

    private int sendGroupSelectionMessage(Long userId) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(userId.toString());
        sendMessage.setText("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π:");

        InlineKeyboardMarkup keyboard = generateGroupSelectionKeyboard(userId);
        sendMessage.setReplyMarkup(keyboard);

        try {
            Message sentMessage = execute(sendMessage); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
            return sentMessage.getMessageId();
        } catch (Exception e) {
            e.printStackTrace();
            return -1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º -1 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    private void updateGroupSelectionMessage(Long userId) {
        Integer messageId = userMessageId.get(userId);
        if (messageId == null || messageId == -1) {
            sendMessage(userId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø.");
            return;
        }

        EditMessageReplyMarkup editMessage = new EditMessageReplyMarkup();
        editMessage.setChatId(userId.toString());
        editMessage.setMessageId(messageId);
        editMessage.setReplyMarkup(generateGroupSelectionKeyboard(userId));

        try {
            execute(editMessage); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(userId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø.");
        }
    }





    private void sendQuotaSelectionMessage(Long chatId) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–æ—Ç—É:");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–≤–æ—Ç—ã
        buttons.add(Collections.singletonList(
                InlineKeyboardButton.builder().text("–û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å").callbackData("QUOTA_–û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å").build()
        ));
        buttons.add(Collections.singletonList(
                InlineKeyboardButton.builder().text("–¶–µ–ª–µ–≤–∞—è –∫–≤–æ—Ç–∞").callbackData("QUOTA_–¶–µ–ª–µ–≤–∞—è –∫–≤–æ—Ç–∞").build()
        ));
        buttons.add(Collections.singletonList(
                InlineKeyboardButton.builder().text("–û—Å–æ–±–∞—è –∫–≤–æ—Ç–∞").callbackData("QUOTA_–û—Å–æ–±–∞—è –∫–≤–æ—Ç–∞").build()
        ));
        buttons.add(Collections.singletonList(
                InlineKeyboardButton.builder().text("–ú–µ—Å—Ç–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º").callbackData("QUOTA_–ú–µ—Å—Ç–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º").build()
        ));

        // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        buttons.add(Collections.singletonList(
                InlineKeyboardButton.builder()
                        .text("üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                        .callbackData("NOTIFY_SETUP")
                        .build()
        ));

        keyboard.setKeyboard(buttons);
        sendMessage.setReplyMarkup(keyboard);
        if (adminIds.contains(chatId)) {
            buttons.add(Collections.singletonList(
                    InlineKeyboardButton.builder()
                            .text("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
                            .callbackData("ADMIN_PANEL")
                            .build()
            ));
        }

        keyboard.setKeyboard(buttons);
        sendMessage.setReplyMarkup(keyboard);

        try {
            execute(sendMessage);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void sendSubjectSelectionMessage(Long chatId, Integer messageId) {
        EditMessageReplyMarkup editMessageReplyMarkup = new EditMessageReplyMarkup();
        editMessageReplyMarkup.setChatId(chatId.toString());
        editMessageReplyMarkup.setMessageId(messageId);

        List<String> selectedSubjects = userSubjects.getOrDefault(chatId, new ArrayList<>());

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        for (SubjectEnum subject : SubjectEnum.values()) {
            String buttonText = selectedSubjects.contains(subject.name())
                    ? "‚úÖ " + subject.getDescription()
                    : "‚òëÔ∏è " + subject.getDescription();
            buttons.add(Collections.singletonList(
                    InlineKeyboardButton.builder()
                            .text(buttonText)
                            .callbackData("SUBJECT_" + subject.name())
                            .build()
            ));
        }

        buttons.add(Collections.singletonList(
                InlineKeyboardButton.builder()
                        .text("‚úÖ –ì–æ—Ç–æ–≤–æ")
                        .callbackData("DONE_SUBJECTS")
                        .build()
        ));

        keyboard.setKeyboard(buttons);
        editMessageReplyMarkup.setReplyMarkup(keyboard);

        try {
            execute(editMessageReplyMarkup);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private InlineKeyboardMarkup generateSubjectSelectionKeyboard(Long chatId) {
        List<String> selectedSubjects = userSubjects.getOrDefault(chatId, new ArrayList<>());

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        for (SubjectEnum subject : SubjectEnum.values()) {
            String buttonText = selectedSubjects.contains(subject.name())
                    ? "‚úÖ " + subject.getDescription()
                    : "‚òëÔ∏è " + subject.getDescription();
            buttons.add(Collections.singletonList(
                    InlineKeyboardButton.builder()
                            .text(buttonText)
                            .callbackData("SUBJECT_" + subject.name())
                            .build()
            ));
        }

        buttons.add(Collections.singletonList(
                InlineKeyboardButton.builder()
                        .text("‚úÖ –ì–æ—Ç–æ–≤–æ")
                        .callbackData("DONE_SUBJECTS")
                        .build()
        ));

        keyboard.setKeyboard(buttons);
        return keyboard;
    }

    private void askForScore(Long userId) {
        String nextSubject = userSubjects.get(userId).get(0);
        String description = SubjectEnum.valueOf(nextSubject).getDescription();
        sendMessage(userId, "–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: " + description);
    }
    private void sendMessage(Long chatId, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(text);

        try {
            execute(sendMessage);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendAvailableSpecialties(Long userId) {
        String quota = userQuotas.get(userId);
        Map<String, Integer> scores = userScores.get(userId);
        List<String> preferredGroups = userPreferredGroups.getOrDefault(userId, new ArrayList<>());

        if (quota == null) {
            sendMessage(userId, "‚ùó –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–≤–æ—Ç—É.");
            sendRestartButton(userId);
            return;
        }

        if (scores == null || scores.isEmpty()) {
            sendMessage(userId, "‚ùó –í—ã –Ω–µ –≤–≤–µ–ª–∏ –±–∞–ª–ª—ã.");
            sendRestartButton(userId);
            return;
        }

        if (preferredGroups.isEmpty()) {
            sendMessage(userId, "‚ùó –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã.");
            sendRestartButton(userId);
            return;
        }

        List<Specialty> availableSpecialties = new ArrayList<>();
        List<Specialty> unknownScoreSpecialties = new ArrayList<>();

        for (Specialty specialty : specialties) {
            String specialtyGroupCode = specialty.getDirection().substring(0, 2); // –ö–æ–¥ –≥—Ä—É–ø–ø—ã - –ø–µ—Ä–≤—ã–µ 2 —Å–∏–º–≤–æ–ª–∞
            if (!preferredGroups.contains(specialtyGroupCode)) {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
            }

            Integer minScore = specialty.getScores().get(quota) != null
                    ? specialty.getScores().get(quota).getMinScore()
                    : null;

            if (minScore == null) {
                unknownScoreSpecialties.add(specialty);
            } else if (isEligibleForSpecialty(scores, specialty, minScore)) {
                availableSpecialties.add(specialty);
            }
        }

        StringBuilder result = new StringBuilder("üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n");
        scores.forEach((subject, score) ->
                result.append("üîπ ").append(SubjectEnum.valueOf(subject).getDescription())
                        .append(": ").append(score).append(" –±–∞–ª–ª–æ–≤\n"));
        result.append("üìà –û–±—â–∏–π –±–∞–ª–ª: ")
                .append(scores.values().stream().mapToInt(Integer::intValue).sum())
                .append("\n\n");

        if (availableSpecialties.isEmpty()) {
            result.append("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n");
        } else {
            result.append("üéì –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n");
            appendSpecialtyList(result, availableSpecialties, quota);
        }

        if (!unknownScoreSpecialties.isEmpty()) {
            result.append("\n‚ùì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–∞—Ö:\n\n");
            appendSpecialtyList(result, unknownScoreSpecialties, null);
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        sendSafeMessage(userId, result.toString());
        sendRestartButton(userId); // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        resetUserData(userId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }


    private void resetUserData(Long userId) {
        userSubjects.remove(userId);
        userScores.remove(userId);
        userQuotas.remove(userId);
        userPreferredGroups.remove(userId);
        userMessageId.remove(userId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    }


    private void sendRestartButton(Long userId) {
        SendMessage message = new SendMessage();
        message.setChatId(userId);
        message.setText("üîÑ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?");
        message.enableMarkdown(true);

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> buttons = Collections.singletonList(
                InlineKeyboardButton.builder().text("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ").callbackData("RESET").build()
        );
        keyboard.setKeyboard(Collections.singletonList(buttons));
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean isEligibleForSpecialty(Map<String, Integer> scores, Specialty specialty, Integer minScore) {
        int totalScore = 0;
        boolean eligible = true;

        for (String subject : specialty.getSubjects()) {
            if (subject.contains("/")) {
                String[] alternatives = subject.split("/");
                boolean passed = false;
                for (String alt : alternatives) {
                    if (scores.containsKey(alt) && scores.get(alt) != null) {
                        totalScore += scores.get(alt);
                        passed = true;
                        break;
                    }
                }
                if (!passed) {
                    eligible = false;
                    break;
                }
            } else {
                if (!scores.containsKey(subject) || scores.get(subject) == null) {
                    eligible = false;
                    break;
                }
                totalScore += scores.get(subject);
            }
        }

        return eligible && totalScore >= minScore;
    }
    private void appendSpecialtyList(StringBuilder builder, List<Specialty> specialties, String quota) {
        int counter = 1;
        for (Specialty specialty : specialties) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Å—Ç—Ä–æ–∫—É —Å –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            String profiles = specialty.getProfiles().stream()
                    .map(profile -> "    ‚Ä¢ " + profile)
                    .collect(Collectors.joining("\n"));

            String specialtyInfo = String.format(
                    "üî∏ #%d\n" +
                            "üè´ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: %s\n" +
                            "üéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %s\n" +
                            "üí° –ü—Ä–æ—Ñ–∏–ª–∏:\n%s\n" +
                            "üìö –§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: %s\n" +
                            (quota != null
                                    ? "üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: %d\n\n"
                                    : "üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n\n"),
                    counter++,
                    specialty.getSpecialty(),
                    specialty.getDirection(),
                    profiles.isEmpty() ? "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö" : profiles,
                    specialty.getStudyForm(),
                    quota != null && specialty.getScores().get(quota) != null
                            ? specialty.getScores().get(quota).getMinScore()
                            : 0
            );

            builder.append(specialtyInfo);
        }
    }

    private void handleNotificationSetup(Long userId, String text) {
        if (text.equalsIgnoreCase("/notifications") || text.equals("NOTIFY_SETUP")) {
            // –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            SendMessage message = new SendMessage();
            message.setChatId(userId);
            message.setText("–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?");

            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

            buttons.add(Arrays.asList(
                    InlineKeyboardButton.builder().text("‚úÖ –í–∫–ª—é—á–∏—Ç—å").callbackData("NOTIFY_ON").build(),
                    InlineKeyboardButton.builder().text("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å").callbackData("NOTIFY_OFF").build()
            ));

            keyboard.setKeyboard(buttons);
            message.setReplyMarkup(keyboard);

            try {
                execute(message);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (userNotificationPreferences.containsKey(userId) &&
                userNotificationPreferences.get(userId) &&
                userNotificationTexts.containsKey(userId) &&
                userNotificationTexts.get(userId) == null) {
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            userNotificationTexts.put(userId, text);
            sendMessage(userId, "–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.");
            // –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            sendQuotaSelectionMessage(userId);
        }
    }
    public void sendDailyNotifications() {
        for (Map.Entry<Long, Boolean> entry : userNotificationPreferences.entrySet()) {
            if (entry.getValue()) { // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
                boolean hasActiveAdmins = adminIds.stream()
                        .anyMatch(id -> userNotificationPreferences.getOrDefault(id, false));

                if (!hasActiveAdmins) {
                    return; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                }
                Long userId = entry.getKey();
                String notificationText = userNotificationTexts.getOrDefault(userId,
                        "‚è∞ –í–∞—à–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç UniversityBot!");

                sendMessage(userId, notificationText);
            }
        }
    }


    @Override
    public String getBotUsername() {
        return "MyMIITAdmissionBot";
    }

    @Override
    public String getBotToken() {
        return "7642404481:AAERLpTO7CG1tobYNO_5lNbAEWEyga8LZXs";
    }
}
